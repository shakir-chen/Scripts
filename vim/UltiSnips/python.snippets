########### header and bottom
snippet code "coding:utf-8"
# coding: utf-8
endsnippet

snippet main "if main"
if __name__ == '__main__':
    ${1}
endsnippet

########### import
snippet im "import"
import ${1}
endsnippet

snippet imp "import"
import ${1:module}
${2}
endsnippet

snippet fim "from . import ."
from ${1} import ${2}
endsnippet

snippet from "from . import ."
from ${1} import ${2}
endsnippet

########### single char
snippet t "True"
True${1}
endsnippet

snippet f "False"
False${1}
endsnippet

snippet n "None"
None${1}
endsnippet

snippet r "return"
return ${1}
endsnippet

snippet s "self."
self.${1}
endsnippet

snippet p "print"
print ${1}
endsnippet

snippet pr "print "
print "${1}"
endsnippet

snippet pri "print ''"
print '${1}'
endsnippet

snippet prt "print trace"
print "TRACK ================= ${1}", ${2}
endsnippet

snippet rep "repr"
repr(${1})
endsnippet

snippet repr "repr"
repr(${1})
endsnippet

snippet _ "__func__"
__${1:init}__${2}
endsnippet

snippet # "# xxxx"
# ${1}
endsnippet

snippet a "assert"
assert ${1}
endsnippet

snippet isi "isinstance"
isinstance(${1}, ${2})
endsnippet

############# 逻辑控制
snippet el "else"
else:
    ${0:# TODO}
endsnippet

snippet ei "elif"
elif ${1}:
    ${2}
endsnippet

snippet while "while"
while ${1:expression}:
    ${0:# TODO}
endsnippet

#############

snippet defs "defs"
def ${1:fname}(self, ${2:**kwargs}):
    """${3:docstring for $1}"""
    ${3:pass}
endsnippet

snippet pro "property"
def ${1}():
    doc = "${2: The $1 property.}"
    def fget(self):
        ${3:return self._$1}
    def fset(self, value):
        ${4:self._$1 = value}
    def fdel(self):
        ${5:del self._$1}
    return locals()
$1 = property(**$1())
endsnippet

snippet init "init"
def __init__(self, ${1:args}):
    ${2}
endsnippet

snippet doc "docstring"
"""
@Author: ${1:`xuanqi`}
@Email: ${2:`chenxuanqi93@gmail.com`}
@Date: ${3}
@Desc: ${4}
"""
endsnippet

snippet rai "raise"
raise ${1}
endsnippet

snippet tr "traceback"
import traceback; traceback.print_exc()
endsnippet
#############

snippet fin "[i for i in l]"
[${1:item} for ${2:$1} in ${3}]
endsnippet

snippet finif "[i for i in l if i]"
[${1:item} for ${2:$1} in ${3} if ${4:$1}]
endsnippet

snippet td "TODO:"
TODO: ${1}
endsnippet

snippet dk "api doc"
    :url: ${1}
    :method: POST GET
    :params:

        None

    :return:(json/jsonp)

        code:
        code:
        code:

endsnippet

#############

snippet rdtxt "read txt"
${1:rdfilename}=open("readfile","r")
lines=${2:$1}.readlines()
${3:$1}.close()
endsnippet

snippet wrtxt "write txt"
${1:wrfilename}=open(filename,'w')
${2:$1}.write(mystr)
${3:$1}.close()
endsnippet

snippet rdexcel "pd excel"
x1=pd.ExcelFile('${1:excelname}.xlsx')
df=x1.parse("Sheet1")
endsnippet

snippet wrexcel "pd excel"
writer=pd.ExcelWriter('${1:excelname}.xlsx')
df.to_excel(writer,'Sheet1')
writer.save()
endsnippet

snippet rdjson "read json"
df=pd.read_json("${1}.json", orient='index')
endsnippet

snippet wrjson "write json"
${1:pd}.to_json("${2}.json",orient="index")
endsnippet



########### xuanqi
snippet fig "figure"
fig,ax = plt.subplots(1)
ax.xaxis.offsetText.set_fontsize(labelftsize)
ax.tick_params(labelsize=tickftsize)

for kw in ['top', 'right']:
	ax.spines[kw].set_visible(False)

# don't put tick labels at the top
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.set_xlabel(kwds['labelx'],fontsize=labelftsize+4) #,fontweight='bold'
ax.set_ylabel(kwds['labely'],fontsize=labelftsize+4)
endsnippet

snippet pltsave "name"
plt.savefig('temp.pdf')
endsnippet

snippet pdb "pdb"
__import__('pdb').set_trace()
endsnippet

snippet fontsz "font size"
labelftsize=18
tickftsize=18
endsnippet

snippet exit "sys exit"
import sys; sys.exit()
endsnippet

snippet mplsty "matplotlib style"
import matplotlib as mpl
try:
	mpl.style.use('xuanqi-seaborn')
except:
	print("matplotlib: use default style")
endsnippet

snippet init  "import packages"
import numpy as np
import matplotlib.pyplot as plt
endsnippet

snippet axmulti "multiple-ax fig"
fig = plt.figure(figsize=(20,6),facecolor='w')
ax=[]
for ii in range(0,${1}):
	ax.append(fig.add_subplot(131+ii))
endsnippet

snippet figsize "figsize"
# figure = plt.figure(1, (20, 10))
fig = plt.figure(figsize=(20,6),facecolor='w')
ax = fig.add_subplot(111)
endsnippet

snippet printfloat "printfloat"
"{:0.2f}.format{}"
endsnippet

snippet noxticks "remove xtick"
ax.set_xticks([], [])
# plt.xticks([], [])
endsnippet

snippet oscheckfile "check file"
import os.path
os.path.isfile($1)
endsnippet

snippet subplot "subplot"
fig, (ax1, ax2) = plt.subplots(2, 1)
ax1.plot( , )
ax2.plot( , )
endsnippet

snippet figadjust "figure adjust"
plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)
endsnippet



