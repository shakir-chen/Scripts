### tmux terminal multiplexer

# loads of it cribbed from:
# https://github.com/diwakergupta/config/blob/master/tmux.conf

# load local tmux.conf
# if-shell "test -f ~/.localtmux.conf" 'source ~/.localtmux.conf'

set -g status-position top
if-shell 'test "$SSH_CONNECTION"' 'source ~/.tmux.linuxlocal.conf'            # if linux, change to bottom

## These enables xterm mouse reporting in tmux
# set -g terminal-overrides 'xterm-256color*:smcup@:rmcup@'

# rebind C-b to C-\ - http://superuser.com/a/271791
unbind-key C-b
set -g prefix 'C-a'
bind-key 'C-a' send-prefix

# set -g prefix 'C-\'
# bind-key 'C-\' send-prefix

# Shortcut to get to the last window
bind-key C-a last-window

# Don't sleep between escape keys
set -s escape-time 0

# Bindings for SSH
# C-z C-s does ssh in a new window
bind-key C-s command-prompt -p ssh: "new-window -n %1 'ssh %1'"
# C-z M-s does ssh in a horizontal split of current window
bind-key M-s command-prompt -p ssh: "split-window -h 'ssh %1'"

# Start numbering at 1
set -g base-index 1

# Rather than constraining window size to the maximum size of any
# client connected to the *session*, constrain window size to the
# maximum size of any client connected to *that window*. Much more
# reasonable. From: https://mutelight.org/practical-tmux
setw -g aggressive-resize on

## globals

# Emacs!
# setw -g mode-keys emacs

#vi like cursor movement
set-window-option -g mode-keys vi

bind P paste-buffer
bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-selection
bind-key -t vi-copy 'r' rectangle-toggle

#bind initial configuration fils
bind D source-file ~/.tmux/dev-3P-Horz
bind F source-file ~/.tmux/dev-3P-Vert
bind G source-file ~/.tmux/dev-4P
bind E source-file ~/.tmux/dev-3H2V

bind -n M-0 \
    if-shell 'tmux list-window | grep 0:' 'select-window -t :0' 'new-window -t 0'
    # if-shell 'tmux list-window | grep 0:' 'display-message "true, as expected"' 'display-message "false"'
    # if-shell "tmux select-window -t :2" 'new-window -t 2' 'select-window -t :2'
bind -n M-1 \
    if-shell 'tmux list-window | grep 1:' 'select-window -t :1' 'new-window -t 1'
bind -n M-2 \
    if-shell 'tmux list-window | grep 2:' 'select-window -t :2' 'new-window -t 2'
bind -n M-3 \
    if-shell 'tmux list-window | grep 3:' 'select-window -t :3' 'new-window -t 3'
bind -n M-4 \
    if-shell 'tmux list-window | grep 4:' 'select-window -t :4' 'new-window -t 4'
bind -n M-5 \
    if-shell 'tmux list-window | grep 5:' 'select-window -t :5' 'new-window -t 5'
bind -n M-6 \
    if-shell 'tmux list-window | grep 6:' 'select-window -t :6' 'new-window -t 6'
bind -n M-7 \
    if-shell 'tmux list-window | grep 7:' 'select-window -t :7' 'new-window -t 7'
bind -n M-8 \
    if-shell 'tmux list-window | grep 8:' 'select-window -t :8' 'new-window -t 8'
bind -n M-9 \
    if-shell 'tmux list-window | grep 9:' 'select-window -t :9' 'new-window -t 9'

bind -n M-h select-pane -L
bind -n M-l select-pane -R
bind -n M-k select-pane -U
bind -n M-j select-pane -D

# try and use the mouse
set -g mouse on

# use utf-8, obviously
setw -g utf8 on
set -g status-utf8 on

## key bindings and commands

# rebind window splitting commands
unbind % # Remove default binding since weâ€™re replacing
unbind '"' # Remove default binding
bind | split-window -h # mnemonic for a vertical border
bind - split-window -v # mnemonic for a horizontal border

# monitor activity
bind-key m setw monitor-activity
set -g monitor-activity on
set -g visual-activity off

## display

# Show messages and notifications for 2 seconds.
set -g display-time 2000

# Refresh the status bar every 1 second.
set -g status-interval 1000

# never ending scroll
set -g history-limit 100000

# Ring the bell
# set -g bell-action current
set -g bell-on-alert off
# set -g visual-bell on
set -g visual-bell off

# Set status bar to be the same as the terminal defaults
set -g status-bg default
set -g status-fg default

# Centre-align status tabs, like screen
set -g status-justify centre

# Message area
set -g message-bg default
set -g message-fg yellow

# Activity in a tab
# Note: these have inverted meaning
set -g window-status-activity-bg black
set -g window-status-activity-fg yellow

# change host to red if we're remote
set -g status-left "#[bg=default]#[fg=magenta]#S "
if-shell 'test "$SSH_CONNECTION"' 'set -g status-right "#[bg=red]#[fg=black] @#h "' 'set -g status-right ""'

    # window title format
    set -g window-status-format '#[bg=kefault]#[fg=default] #I:#(pwd="#{pane_current_path}"; echo ${pwd####*/})#F'
    set -g window-status-current-format '#[bg=cyan]#[fg=black] #I:#(pwd="#{pane_current_path}"; echo ${pwd####*/})#F'

    #set -g window-status-format "#[bg=default]#[fg=default] #I:#W "
    #set -g window-status-current-format "#[bg=cyan]#[fg=black] #I:#W "

    set -g set-titles on
    if-shell 'test "$SSH_CONNECTION"' 'set -g set-titles-string "@#h > #W"' 'set -g set-titles-string "#h > #W"'

# To get this to work, put:
# #!/bin/bash
# if test "$SSH_AUTH_SOCK" ; then
#     ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
# fi
# Into ~/.ssh/rc and make it 700.
if-shell 'test "$SSH_CONNECTION"' "set-environment -g 'SSH_AUTH_SOCK' ~/.ssh/ssh_auth_sock"

# Reload this file
bind r source-file ~/.tmux.conf \; display "Reloaded!"

